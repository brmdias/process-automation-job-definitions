[ {
  "defaultTab" : "nodes",
  "description" : "Checks for any global/widespread issues specifically related to Microsoft.",
  "executionEnabled" : true,
  "group" : "Outages",
  "id" : "747298c3-2ed5-487d-833f-54403ed628f5",
  "loglevel" : "INFO",
  "name" : "Check for GCP Outages (scheduled)",
  "nodeFilterEditable" : false,
  "plugins" : {
    "ExecutionLifecycle" : { }
  },
  "runnerSelector" : {
    "runnerFilterMode" : "LOCAL",
    "runnerFilterType" : "LOCAL_RUNNER"
  },
  "scheduleEnabled" : true,
  "schedules" : [ {
    "jobParams" : null,
    "name" : "Public Cloud Providers Check"
  } ],
  "sequence" : {
    "commands" : [ {
      "description" : "Check GCP Status",
      "fileExtension" : ".py",
      "interpreterArgsQuoted" : false,
      "plugins" : {
        "LogFilter" : [ ]
      },
      "script" : "import sys\nimport urllib.request\nimport json\n\ndef check_gcp_status():\n    gcp_status_url = 'https://status.cloud.google.com/incidents.json'\n    try:\n        response = urllib.request.urlopen(gcp_status_url)\n        content = response.read()\n        data = json.loads(content)\n    except urllib.error.URLError as e:\n        print(f\"Error fetching the GCP status: {e}\")\n        sys.exit(1)\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing the GCP status: {e}\")\n        sys.exit(1)\n\n    issues = []\n    for incident in data:\n        # Check for the presence of expected keys\n        status = incident.get('status', 'unknown')\n        service_name = incident.get('service_name', 'Unknown Service')\n        description = incident.get('external_desc', 'No description available')\n        begin_date = incident.get('begin', 'No date available')\n\n        # Adjust the condition based on the actual data structure\n        if status != 'resolved':\n            issues.append({\n                'title': service_name,\n                'description': description,\n                'date': begin_date\n            })\n\n    if issues:\n        print(\"GCP Status Issues Detected:\")\n        for issue in issues:\n            print(f\"Service: {issue['title']}\")\n            print(f\"Description: {issue['description']}\")\n            print(f\"Date: {issue['date']}\")\n            print(\"-----\")\n        sys.exit(1)\n    else:\n        print(\"No issues found in the GCP status feed.\")\n        sys.exit(0)\n\nif __name__ == \"__main__\":\n    check_gcp_status()",
      "scriptInterpreter" : "python"
    } ],
    "keepgoing" : false,
    "strategy" : "node-first"
  },
  "uuid" : "747298c3-2ed5-487d-833f-54403ed628f5"
} ]
