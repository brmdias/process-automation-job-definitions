[ {
  "defaultTab" : "nodes",
  "description" : "",
  "executionEnabled" : true,
  "group" : "Toolkit/OS Upgrades",
  "id" : "78b2009f-63f4-4a53-85c8-b952cd3870d7",
  "loglevel" : "INFO",
  "name" : "Linux OS Upgrade",
  "nodeFilterEditable" : false,
  "nodefilters" : {
    "dispatch" : {
      "excludePrecedence" : true,
      "keepgoing" : false,
      "rankOrder" : "ascending",
      "successOnEmptyNodeFilter" : false,
      "threadcount" : "1"
    },
    "filter" : "tags: rd.*"
  },
  "nodesSelectedByDefault" : true,
  "options" : [ {
    "label" : "Release Version",
    "name" : "releasever",
    "type" : "text",
    "value" : "2023.6.20241121"
  }, {
    "hidden" : true,
    "name" : "rba-token",
    "secure" : true,
    "storagePath" : "keys/bdias-rba-token",
    "type" : "text",
    "valueExposed" : true
  }, {
    "delimiter" : ",",
    "enforced" : true,
    "label" : "Server UUID",
    "multivalued" : true,
    "name" : "server-uuid",
    "required" : true,
    "type" : "text",
    "value" : "64a08f29-c38f-4cbd-9e3d-5c088df386f5",
    "values" : [ "64a08f29-c38f-4cbd-9e3d-5c088df386f5", "38c5d9cf-349e-42eb-b132-cdbe8c6b46d0" ],
    "valuesListDelimiter" : ","
  }, {
    "label" : "Online Server",
    "name" : "online-server",
    "type" : "text"
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "scheduleEnabled" : true,
  "schedules" : [ ],
  "sequence" : {
    "commands" : [ {
      "autoSecureInput" : "false",
      "description" : "Pre-upgrade checks",
      "fileExtension" : ".py",
      "interpreterArgsQuoted" : false,
      "passSecureInput" : "false",
      "script" : "import requests\n\nserver = 'bdias.pd-sandbox.com'\napi_token = '@option.rba-token@'\nuuid = '@option.server-uuid@'\n\n# Disable execution mode\npost_url = f'https://{server}/api/50/enterprise/cluster/executions/disable?uuid={uuid}'\npost_headers = {\n    'Accept': 'application/json',\n    'X-Rundeck-Auth-Token': api_token\n}\n\nresponse = requests.post(post_url, headers=post_headers)\n\n# Check if the POST request was successful\nif response.status_code == 200:\n    json_response = response.json()  # Save the JSON response as a variable\n    print(\"Execution Mode set to Disabled with successful.\")\n    print(f\"Response: {response.status_code}\")\n    print(f\"{response.text}\")\nelse:\n    print(f\"GET request failed with status code {response.status_code}\")\n    print(response.text)\n    exit(1)\n\n# Get Job Forecast\n\n# Enable schedule takeover in case of jobs scheduled for the next X minutes\nput_url = f'https://{server}/api/50/scheduler/takeover'\nput_headers = {\n    'Accept': 'application/json',\n    'X-Rundeck-Auth-Token': api_token\n}\nput_body = {\n    \"server\": {\n        \"uuid\": uuid,\n        \"all\": True\n    }\n}\n\nresponse = requests.put(put_url, headers=put_headers, json=put_body)\n\n# Check the response\nprint(response.status_code)\nprint(response.json())  # If the response contains JSON\n\n",
      "scriptInterpreter" : "python -u"
    }, {
      "description" : "Job schedule takeover",
      "jobref" : {
        "group" : "Toolkit/OS Upgrades",
        "importOptions" : true,
        "name" : "Job schedule takeover",
        "uuid" : "12fda892-0ac7-4bb8-92af-5fd32ba96cbb"
      }
    }, {
      "autoSecureInput" : "false",
      "description" : "Upgrade",
      "passSecureInput" : "false",
      "script" : "sudo dnf upgrade --releasever=@option.releasever@ -y"
    }, {
      "autoSecureInput" : "false",
      "description" : "Reboot",
      "passSecureInput" : "false",
      "script" : "echo \"Going to reboot!\"\nsudo reboot"
    }, {
      "configuration" : {
        "host" : "${node.hostname}",
        "interval" : "5",
        "maxtry" : "48"
      },
      "nodeStep" : true,
      "type" : "nixy-waitfor-local-ping"
    }, {
      "configuration" : {
        "cycles" : "6",
        "interval" : "5",
        "progress" : "true"
      },
      "description" : "Wait 30s for SSH to be up",
      "nodeStep" : false,
      "type" : "nixy-waitfor-sleep-workflow-step"
    }, {
      "autoSecureInput" : "false",
      "description" : "Post-upgrade checks",
      "passSecureInput" : "false",
      "script" : "echo \"Checking OS version after upgrade\"\n\ncat /etc/os-release | grep \"PRETTY_NAME\"\nuname -r\n\necho \"Checking Rundeck service status\"\nsystemctl status rundeckd.service"
    }, {
      "configuration" : {
        "file" : "/var/log/rundeck/service.log",
        "interval" : "5",
        "maxtry" : "60",
        "pattern" : "Grails application running at http://localhost:4440 in environment: production"
      },
      "description" : "Waiting for Rundeck to startup",
      "nodeStep" : true,
      "type" : "nixy-waitfor-contains"
    }, {
      "autoSecureInput" : "false",
      "description" : "Enable Execution Mode in the upgraded server",
      "fileExtension" : ".py",
      "interpreterArgsQuoted" : false,
      "passSecureInput" : "false",
      "script" : "import requests\n\nserver = 'bdias.pd-sandbox.com'\napi_token = '@option.rba-token@'\nuuid = '@option.server-uuid@'\n\n# Disable execution mode\npost_url = f'https://{server}/api/50/enterprise/cluster/executions/disable?uuid={uuid}'\npost_headers = {\n    'Accept': 'application/json',\n    'X-Rundeck-Auth-Token': api_token\n}\n\nresponse = requests.post(post_url, headers=post_headers)\n\n# Check if the POST request was successful\nif response.status_code == 200:\n    json_response = response.json()  # Save the JSON response as a variable\n    print(\"Execution Mode set to Disabled with successful.\")\n    print(f\"Response: {response.status_code}\")\n    print(f\"{response.text}\")\nelse:\n    print(f\"GET request failed with status code {response.status_code}\")\n    print(response.text)\n    exit(1)",
      "scriptInterpreter" : "python -u"
    } ],
    "keepgoing" : false,
    "strategy" : "node-first"
  },
  "uuid" : "78b2009f-63f4-4a53-85c8-b952cd3870d7"
} ]
